/*

  !   `npm init`
1.   Purpose  : The command `npm init` initializes a new Node.js project.
2.   Function  : It prompts you to enter several pieces of information such as the project's name, version, description, entry point, test command, repository URL, keywords, author, and license.
3.   Result  : After you provide this information, `npm init` creates a `package.json` file in your project directory, which stores the information you entered. And a node module folder with all the dependencies and dev dependencies.

  !   Why `npm init` Is Required
1.   Project Manifest  : `package.json` serves as a manifest for your project. It is essential for managing the project’s dependencies, scripts, version, and a whole lot more.
2.   Dependency Management  : It allows you to install and manage external libraries (packages) your project depends on.
3.   Script Aliases  : You can define scripts to run specific tasks such as tests, start-up scripts, or custom build processes.

  !   What is `package.json` File
1.   Project Metadata  : This file holds metadata relevant to the project, used for identifying the project and its dependencies to ensure that it runs consistently across different setups.
2.   Dependencies  : Lists all the Node.js packages that your project depends on to work. These are installed via `npm install <package-name>`.
3.   devDependencies  : Lists all the packages required for development and testing, not necessary in production.
4.   Scripts  : Defines script commands you can run with `npm run <script-name>`, like starting the application or running tests.
5.   Version  : Keeps track of the current version of your project, which can be important for publishing to a package manager and version control.

  !   What is `package-lock.json` File
1.   Dependency Tree  : This file is automatically generated for any operations where npm modifies either the `node_modules` tree or the `package.json`. It describes the exact dependency tree that was installed.
2.   Consistency  : It ensures that the same packages are installed in the same hierarchy, with the same version on every npm install, across all environments, providing consistency.
3.   Snapshot  : Consider it a snapshot of your `node_modules` directory, capturing the exact versions of each installed package that satisfy the listed dependencies.

  !   What is `node_modules` Folder
1.   Installed Packages  : This folder contains all the packages that you have installed (either directly or as dependencies of other packages) for your project.
2.   Local Packages  : All packages are installed locally in the `node_modules` directory in your project folder unless you install them globally with `npm install -g <package-name>`.
3.   Project-specific  : Each Node.js project has its own `node_modules` folder. This isolation ensures that projects don’t interfere with each other.

  !   Uses of `node_modules` Folder
1.   Require Modules  : When you `require()` a module in your Node.js code, the runtime looks for it in this folder.
2.   Executable Binaries  : Some packages come with executable binaries that can be run from the command line, and these are stored in `node_modules/.bin/`.
3.   Native Modules  : Some packages have native C++ add-ons and pre-compiled binaries that need to be built or linked. They live here as well.

  !   Short Notes

- `npm init` is the starting point for any new Node.js project, setting up the `package.json` file.
- `package.json` is the heart of your project's configuration, including metadata, dependencies, and scripts.
- `package-lock.json` is an auto-generated document that locks down the versions of installed packages for consistent installs across environments.
- `node_modules` is where all your installed packages live, enabling you to require and use them in your Node.js application.

*/

/*
!    Difference Between a Library and a Package
1.    Library   :
   -    Definition   : A library is a collection of pre-written code that developers can use to optimize tasks. It usually offers a set of functions and methods that perform common tasks and can be reused across applications.
   -    In Node/npm Context   : In Node.js, a library refers to a reusable piece of code that can be imported and used in your Node.js applications, often focused on a specific aspect like HTTP requests, database operations, etc.

2.    Package   :
   -    Definition   : A package is a broader term that often includes one or more libraries. It's a bundle of software and metadata that is manageable by package managers like npm.
   -    In Node/npm Context   : In the npm (Node Package Manager) ecosystem, a package refers to a file or directory that is described by a `package.json` file. It can contain libraries, executables, or assets.

!    Why We Use External Libraries or Packages
-    Code Reusability   : They provide pre-written, tested, and optimized code that can be reused, saving developers from having to write common features from scratch.
-    Efficiency   : Libraries and packages can help speed up the development process by providing solutions to complex problems that have already been solved by others.
-    Community Support   : Many libraries and packages are maintained by a community of developers, which helps in the longevity and reliability of the code.
-    Specialization   : They often focus on solving a specific problem very well, providing expertise that you might not have in-house.

!    How to Install a New Package (e.g., axios)
To install a package like `axios`, use the following npm command:

npm install axios

!    How to Use It in a File Using ES6 Modules
To use `axios` in your Node.js file with ES6 module syntax:
   */


// Import axios using ES6 import statement
import axios from 'axios.js';

// Use axios to make an HTTP GET request
axios.get('https://api.example.com/data')
  .then(response => {
    console.log(response.data);
  })
  .catch(error => {
    console.error('An error occurred:', error);
  });

/*
!    How to Update the Package
To update the `axios` package to the latest version, run:
npm update axios

!    How to Uninstall It
To remove the `axios` package from your project, use:
npm uninstall axios

!    Commands
1.    Install a package   : `npm install axios`
   - This will download `axios` and its dependencies and add them to your `node_modules` folder and list it in your `package.json` file.

2.    Use the package    in your .js file:
      
   // Use ES6 import syntax
   import axios from 'axios';

   axios.get('https://api.example.com').then((response) => {
     console.log(response.data);
   });

3.    Update the package   : `npm update axios`
   - This command checks for newer versions of `axios` within the version ranges specified in your `package.json` file and installs any updates.

4.    Uninstall the package   : `npm uninstall axios`
   - This command will remove `axios` from your `node_modules` folder and update the `package.json` and `package-lock.json` files to see the change.
*/